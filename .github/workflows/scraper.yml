name: Run Scraper Daily

on:
  schedule:
    # Roda todos os dias à 1h da manhã (UTC).
    # Ajuste o cron para o seu fuso horário desejado.
    # Exemplo: Para rodar às 9h da manhã de Brasília (-3h UTC), seria '0 12 * * *'
    # 1 AM UTC é 22 PM do dia anterior em Brasília (-3h).
    - cron: '0 1 * * *'
  workflow_dispatch: # Permite acionar o workflow manualmente na interface do GitHub

jobs:
  scrape_and_upload:
    runs-on: ubuntu-latest

    # Permissões para o GITHUB_TOKEN automático.
    # 'contents: write' é CRUCIAL para permitir o upload de arquivos para o repositório.
    # As permissões para o Google Drive são tratadas pelas suas credenciais de serviço no Python,
    # não aqui.
    permissions:
      contents: write # ESSENCIAL para uploads ao mesmo repositório
      # Removi 'drive: read' e 'drive: write' daqui, pois não são permissões para o GITHUB_TOKEN.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Usa a Action oficial para clonar seu repositório

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Você pode especificar uma versão como '3.10' ou '3.11'
          cache: 'pip' # Otimiza a instalação de dependências

      - name: Install dependencies
        run: pip install -r requirements.txt # Garante que todas as dependências estão instaladas

      - name: Create service account file
        # AQUI: A seção 'env' agora é única para este passo.
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          SERVICE_ACCOUNT_FILE: servicescraperdou.json # Nome do arquivo que seu script espera
        run: |
          echo "$SERVICE_ACCOUNT_JSON" | base64 --decode > "$SERVICE_ACCOUNT_FILE"

      - name: Run Python script
        # AQUI: A seção 'env' agora é única para este passo, contendo todas as variáveis.
        env:
          # Variáveis para o Google Drive (se ainda forem usadas para a planilha de termos)
          # Estas variáveis são lidas pelo seu script Python e usadas com as credenciais da conta de serviço.
          FOLDER_ID: ${{ secrets.FOLDER_ID }} # ID do Google Drive Compartilhado ou pasta pessoal
          TERMS_FILE_ID: ${{ secrets.TERMS_FILE_ID }} # ID do arquivo termos.xlsx

          # Variáveis para o upload no GitHub
          # Usamos as variáveis de contexto do GitHub Actions para garantir que
          # os valores do repositório e branch sejam sempre corretos.
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH: ${{ github.ref_name }} # O branch que disparou o workflow (e.g., 'main')
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          # O GITHUB_TOKEN é injetado automaticamente pelo GitHub Actions.
          # Você não precisa defini-lo aqui a menos que queira usar um PAT personalizado.
          # Para uploads no mesmo repositório, o token padrão é o ideal e mais seguro.
          # Seu script Python deve lê-lo diretamente via os.getenv("GITHUB_TOKEN").
        run: python main.py

      - name: Clean up service account file
        if: always() # Garante que este passo sempre rode, mesmo se o script falhar
        run: rm -f servicescraperdou.json # Remove o arquivo de credenciais após o uso